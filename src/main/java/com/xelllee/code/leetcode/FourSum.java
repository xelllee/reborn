package com.xelllee.code.leetcode;

import java.util.*;

/**
 * Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target?
 * Find all unique quadruplets in the array which gives the sum of target.
 * <p/>
 * Note:
 * Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
 * The solution set must not contain duplicate quadruplets.
 * For example, given array S = {1 0 -1 0 -2 2}, and target = 0.
 * {-2,-1,0,0,1,2}
 * <p/>
 * A solution set is:
 * (-1,  0, 0, 1)
 * (-2, -1, 1, 2)
 * (-2,  0, 0, 2)
 */
public class FourSum {


    public static void main(String[] args) {

//        int[] nums = {1, 0, -1, 0, -2, 2};
//        int[] nums = {-3, -2, -1, 0, 0, 1, 2, 3};
        int[] nums = {-477, -476, -471, -462, -440, -400, -398, -394, -394, -393, -389, -386, -350, -346, -338, -315, -273, -249, -182, -172, -166, -161, -149, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, -116, -112, -109, -100, -73, -33, -26, -22, -11, 6, 8, 13, 19, 56, 78, 101, 102, 111, 140, 155, 158, 181, 205, 211, 225, 232, 242, 254, 265, 281, 308, 310, 320, 320, 364, 366, 381, 385, 387, 443, 496, 496};

        long start1 = System.currentTimeMillis();
        for (int i = 0; i < 100; i++) {
//            System.out.println(makeItRight(nums, 1236));
            makeItRight(nums, 1236);
        }


        System.out.println(System.currentTimeMillis() - start1);
        long start2 = System.currentTimeMillis();
        for (int i = 0; i < 100; i++) {
//            System.out.println(makeItRight2(nums, 1236));
            makeItRight2(nums, 1236);
        }
        System.out.println(System.currentTimeMillis() - start2);
    }



    // slow
    private static List<List<Integer>> makeItRight2(int[] nums, int target) {
        List<List<Integer>> lists = new ArrayList<List<Integer>>();

        if (nums == null || nums.length < 4) return lists;

        Arrays.sort(nums);
        HashMap<Integer, List<Integer[]>> summap = new HashMap<Integer, List<Integer[]>>();

        //n2
        for (int i = 0; i < nums.length; i++) {
            for (int j = 0; j < nums.length; j++) {
                if (i == j) continue;
                Integer[] tmp = {i, j};
                int sum = nums[i] + nums[j];

                if (!summap.containsKey(sum)) {
                    summap.put(sum, new ArrayList<Integer[]>());
                }
                summap.get(sum).add(tmp);

            }
        }

        int diff;
        HashSet<List<Integer>> setlists = new HashSet<List<Integer>>();
        for (int key : summap.keySet()) {

            diff = target - key;

            if (summap.containsKey(diff)) {

                for (Integer[] arr1 : summap.get(key)) {

                    for (Integer[] arr2 : summap.get(diff)) {

                        HashSet<Integer> tmpset = new HashSet<Integer>(Arrays.asList(arr1));
                        tmpset.addAll(Arrays.asList(arr2));

                        if (tmpset.size() == 4) {

                            ArrayList<Integer> quadlist = new ArrayList<Integer>(4);
                            for (int index : tmpset) {
                                quadlist.add(nums[index]);
                            }
                            Collections.sort(quadlist);
                            setlists.add(quadlist);
                        }
                    }

                }
            }
        }

        lists = new ArrayList<List<Integer>>(setlists);

        return lists;
    }


    //n3
    private static List<List<Integer>> makeItRight(int[] nums, int target) {

        List<List<Integer>> lists = new ArrayList<List<Integer>>();

        if (nums == null || nums.length < 4) return lists;

        Arrays.sort(nums);

        List<Integer> sub;

        for (int i = 0; i < (nums.length - 3); i++) {

            if (i > 0 && nums[i] == nums[i - 1]) continue;

            int jcounter = 0;
            for (int j = (i + 1); j < (nums.length - 2); j++) {

                if (jcounter > 0 && nums[j] == nums[j - 1]) continue;

                int q = j + 1, p = nums.length - 1;


                while (q < p) {

                    int diff = nums[i] + nums[j] + nums[q] + nums[p] - target;

                    if (diff > 0) {
                        p--;
                    } else if (diff < 0) {
                        q++;

                    } else {
                        //==

                        Integer[] arr = {nums[i], nums[j], nums[q], nums[p]};
                        sub = Arrays.asList(arr);
                        lists.add(sub);

                        p--;
                        q++;

                        while (q < p && nums[p] == nums[p + 1]) {
                            p--;
                        }
                        while (q < p && nums[q] == nums[q - 1]) {
                            q++;
                        }

                    }
                }
                jcounter++;
            }
        }

        return lists;

    }


}
